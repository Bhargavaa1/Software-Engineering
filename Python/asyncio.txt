Synchronous Programming- In programming, we can simplify the definition of synchronous code such as a "bunch of statements in sequences": so each statement in your code is executed one afer the other. This means each statement has to wait for the previous one to finish executing.
Asynchronous Programming refers to the occurrence of events independent of the main program flow and ways to deal with such events.
Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed.
Async event-loop is a programming construct or design pattern that waits for and dispatches events or messages in a program

``` 
import asyncio

# async is a wrapper on a function that creates a coroutine object and allows us to program asynchronously
async def main():
  print('Bills Mafia')
  await foo('text')

# to use the await keyword it must be inside an async function and is used to run a corountine object
async def foo(text):
  print(text)
  await asyncio.sleep(1)

# asyncio.run is an event loop
asyncio.run(main())

